{"version":3,"sources":["components/Select/SelectItem.jsx","redux/actions/meshAction.js","components/ListItem/ListItem.jsx","components/List/List.jsx","components/MeshItem/MeshItem.jsx","components/MeshArray/MeshArray.jsx","components/SpawnPlatform/SpawnPlatform.jsx","App.js","redux/reducers/meshReducer.js","redux/store.js","index.js","components/Select/select.module.css","components/ListItem/listitem.module.css","components/List/list.module.css"],"names":["SelectForm","dispatch","useDispatch","React","useState","form","setForm","value","setValue","color","setColor","className","styles","block","FormControl","variant","InputLabel","id","Select","labelId","select","label","onChange","e","target","MenuItem","TextField","type","Button","onClick","args","obj","Date","now","position","Math","random","console","log","addMesh","size","ListItem","item","IconButton","aria-label","removeMesh","List","meshes","useSelector","state","list","map","mesh","MeshItem","useRef","ref","castShadow","attach","factor","MeshArray","key","SpawnPlatform","children","colorManagement","shadowMap","style","height","camera","fov","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","rotation","PI","receiveShadow","OrbitControls","App","MeshReducer","action","filter","store","createStore","meshReducer","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.3c40d904.chunk.js","sourcesContent":["import React from 'react'\r\nimport {FormControl, MenuItem, Select, InputLabel, TextField, Button} from '@material-ui/core'\r\nimport styles from './select.module.css'\r\nimport {useDispatch} from 'react-redux'\r\nimport {addMesh} from '../../redux/actions/meshAction'\r\nconst SelectForm = () => {\r\n  const dispatch = useDispatch()\r\n  const [form, setForm] = React.useState('')\r\n  const [value, setValue] = React.useState('')\r\n  const [color, setColor] = React.useState('#000000')\r\n  \r\n  const onChangeForm = e => setForm(e.target.value);\r\n  const onChangeColor = e => setColor(e.target.value);\r\n  const onChangeValue = e => {\r\n    if(+e.target.value > 5 ) return false\r\n    setValue(+e.target.value)\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    let args = [];\r\n    if(form === 'cube'){\r\n      args = [value,value,value]\r\n    }\r\n    else if(form === 'sphere'){\r\n      args = [value,30,30]\r\n    }\r\n    else if(form === 'pyramid'){\r\n      args = [value,value,4]\r\n    }\r\n    const obj = {\r\n      id: Date.now(),\r\n      form: form,\r\n      args: args,\r\n      position: [((Math.random() - 0.5) * 20), (Math.random() * 6), ((Math.random() - 0.5) * 20)],\r\n      color: color\r\n    }\r\n    console.log(obj)\r\n    form && value && dispatch(addMesh(obj))\r\n  };\r\n\r\n  \r\n  return (\r\n    <div className={styles.block}>\r\n      <FormControl variant=\"outlined\" >\r\n          <InputLabel id=\"demo-simple-select-outlined-label\">Object</InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-outlined-label\"\r\n            id=\"demo-simple-select-outlined\"\r\n            className={styles.select}\r\n            label=\"Object\"\r\n            onChange={onChangeForm}\r\n            value={form}\r\n          >\r\n            <MenuItem value=\"\">\r\n              <em>None</em>\r\n            </MenuItem>\r\n            <MenuItem value={'cube'}>Cube</MenuItem>\r\n            <MenuItem value={'sphere'}>Sphere</MenuItem>\r\n            <MenuItem value={'pyramid'}>Pyramid</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n        <TextField id=\"outlined-basic\" value={value} onChange={onChangeValue} label=\"Enter a size of object\" variant=\"outlined\" />\r\n        <input  type=\"color\" value={color} onChange={onChangeColor} className={styles.color}  />\r\n        <Button variant=\"contained\" color=\"primary\" onClick={onSubmit} size=\"large\">\r\n          create\r\n        </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SelectForm\r\n","export const addMesh = obj => ({\r\n  type: 'ADD_MESH',\r\n  obj\r\n})\r\n\r\nexport const removeMesh = id => ({\r\n  type: 'REMOVE_MESH',\r\n  id\r\n})","import React from 'react'\r\n\r\nimport styles from './listitem.module.css'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {useDispatch} from 'react-redux'\r\nimport { removeMesh } from '../../redux/actions/meshAction'; \r\nconst ListItem = ({id, form}) => {\r\n  const dispatch = useDispatch()\r\n  const onDelete = () => dispatch(removeMesh(id))\r\n  return (\r\n    <li className={styles.item}>\r\n      <p>{id} {form}</p>\r\n      <IconButton aria-label=\"delete\" onClick={onDelete} >\r\n        <DeleteIcon />\r\n      </IconButton> \r\n    </li>\r\n  )\r\n}\r\n\r\nexport default ListItem\r\n","\r\nimport React from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport  ListItem  from '../ListItem/ListItem'\r\nimport styles from './list.module.css'\r\nconst List = () => {\r\n  const meshes = useSelector(state => state)\r\n  \r\n  return (\r\n    <ul className={styles.list}>\r\n      {meshes && meshes.map(mesh => (\r\n        <ListItem key={mesh.id} {...mesh}/>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default List\r\n","import React from 'react'\r\n\r\nconst MeshItem = ({ position, color, args, form }) => {\r\n  const mesh = React.useRef();\r\n  //useFrame allows us to re-render/update rotation on each frame\r\n  // useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\r\n\r\n  return (\r\n    <mesh\r\n      \r\n      position={position}\r\n      ref={mesh}\r\n      castShadow>\r\n      {(form === 'cube' && <boxBufferGeometry attach='geometry' args={args} />) ||\r\n      (form === 'sphere' && <sphereGeometry attach='geometry' args={args} />) ||\r\n      (form === 'pyramid' && <coneGeometry attach='geometry' args={args} />)}\r\n      <meshStandardMaterial\r\n        color={color}\r\n        attach='material'\r\n        factor={0.6}\r\n      />\r\n    </mesh>\r\n\r\n  );\r\n};\r\n\r\nexport default MeshItem\r\n","import React from 'react'\r\nimport MeshItem from '../MeshItem/MeshItem'\r\n\r\nconst MeshArray = ({meshes}) => {\r\n  return (\r\n    <>\r\n      {meshes && meshes.map(mesh => (\r\n        <MeshItem  {...mesh} key={mesh.id} />\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MeshArray\r\n","import React from 'react'\r\nimport MeshArray from '../MeshArray/MeshArray'\r\nimport { Canvas } from '@react-three/fiber'\r\nimport { OrbitControls } from \"@react-three/drei\";\r\nimport {useSelector} from 'react-redux'\r\nconst SpawnPlatform = () => {\r\n  const meshes = useSelector(state => state);\r\n  \r\n  return (\r\n    <>\r\n      <Canvas\r\n        children\r\n        colorManagement\r\n        shadowMap\r\n        style={{ height: '88vh' }}\r\n        camera={{ position: [0, 2, 10], fov: 60 }}>\r\n        <ambientLight intensity={0.3} />\r\n        <directionalLight\r\n          castShadow\r\n          position={[0, 10, 0]}\r\n          intensity={1.5}\r\n          shadow-mapSize-width={1024}\r\n          shadow-mapSize-height={1024}\r\n          shadow-camera-far={50}\r\n          shadow-camera-left={-10}\r\n          shadow-camera-right={10}\r\n          shadow-camera-top={10}\r\n          shadow-camera-bottom={-10}\r\n        />\r\n        <pointLight position={[-10, 0, -20]} intensity={0.5} />\r\n        <pointLight position={[0, -10, 0]} intensity={1.5} />\r\n        <group>\r\n\r\n          <mesh\r\n            rotation={[-Math.PI / 2, 0, 0]}\r\n            position={[0, 0, 0]}\r\n            receiveShadow>\r\n            <planeBufferGeometry attach='geometry' args={[30, 30]} />\r\n            <meshStandardMaterial\r\n              color='lightblue'\r\n              attach='material'\r\n              factor={0.6}\r\n            />\r\n            \r\n          </mesh>\r\n          \r\n          <MeshArray meshes={meshes} />\r\n        </group>\r\n        <OrbitControls />\r\n      </Canvas>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SpawnPlatform\r\n","import React from 'react'\nimport SelectForm from './components/Select/SelectItem'\nimport List from './components/List/List'\nimport SpawnPlatform from './components/SpawnPlatform/SpawnPlatform'\n\nconst App = () => {\n\n  return (\n    <div>\n      <SelectForm />\n      <List />\n      <SpawnPlatform />\n    </div>\n  )\n}\n\nexport default App\n\n","const meshes = [\r\n  {\r\n    id: 1,\r\n    form: 'cube',\r\n    args: [2, 2, 2],\r\n    position: [0, 1, 0],\r\n    color: 'lightgreen'\r\n  },\r\n  {\r\n    id: 2,\r\n    form: 'sphere',\r\n    args: [1, 30, 30],\r\n    position: [-2, 1, -5],\r\n    color: 'orange',\r\n  },\r\n  {\r\n    id: 3,\r\n    form: 'pyramid',\r\n    args: [2, 2, 4],\r\n    position: [5, 1, 2],\r\n    color: 'pink',\r\n  }\r\n];\r\n\r\nconst MeshReducer = (state = meshes, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_MESH':\r\n      return [\r\n        ...state,\r\n        {\r\n          id: action.obj.id,\r\n          form: action.obj.form,\r\n          position: action.obj.position,\r\n          color: action.obj.color,\r\n          args: action.obj.args\r\n        }\r\n      ]\r\n    case 'REMOVE_MESH':\r\n      return state.filter(mesh => mesh.id !== action.id)\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default MeshReducer;","import { createStore } from 'redux'\r\nimport meshReducer from './reducers/meshReducer'\r\n\r\nconst store = createStore(meshReducer)\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  \n    <Provider store={store}>\n      <App />\n    </Provider>\n  ,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"select_select__U4vZy\",\"block\":\"select_block__qDPhh\",\"color\":\"select_color__2HIKX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"listitem_item__1JWUq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"list_list__FTqm-\"};"],"sourceRoot":""}